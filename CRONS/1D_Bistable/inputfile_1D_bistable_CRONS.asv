clc
clear

r = 2;
dim = 1;
param1 = 2 + dim;
samples = 100;
delta = 1E-4; %regularization parameter


A0 = 1*ones(1,r)/(r);
L0 = 1./( r*sqrt(pi)*A0.^2 );

% A0 = rand(1,r);
% L0 =  rand(1,r);
% XC0 = 4*(rand(1,r)-0.5);

A0 = 0.5*ones(1,r);
% A0 = 1*ones(1,r)/(r/2);
% L0 = 1./( r*sqrt(pi)*A0.^2 );
L0 = 1./( sqrt(pi)/2 )*ones(1,r);

% XC0 = [-2, -1];
% XC0 = [-ones(1,r/2), -2*ones(1,r/2)];
XC0 = [-ones(1,ceil(r/2)), -2*ones(1,ceil(r/2))]; %r = 9, delta = 0.1 bad, delta = 0.5 good 


volans = sqrt(pi)*sum(A0.^2.*L0);

q0=zeros(r*param1,1);
for i = 0:r-1
    q0((1:param1)+i*param1) = ...
        [A0(i+1)/sqrt(volans),L0(i+1),XC0(i+1)];
end

% sigma = 0.01*eye(gaussnum);
sigma = 0.5;
nu = sigma^2/2;

alpha1 = 1/4;
alpha2 = 0;
alpha3 = -1/2;

% % time grid
% t0 = 0.0;
% ts = 5; %when to speed up
% tf = 500;
% % t = t0 : 1 : tf;
% dt = 0.1;
% t = [t0 :dt:ts - dt,  ts:5:tf];

% time grid
t0 = 0.0;
ts1 = 5; %when to speed up
ts2 = 25; %when to speed up
tf = 400;
% t = t0 : 1 : tf;
dt = 0.025;
% t = [t0 :dt:ts1-dt,  ts1:.5:ts2-.5,ts2:5:tf ];
t = [t0 :dt:0.5-dt,0.5 :.1:5-.1, 5:.5:ts2-.5,ts2:5:tf ];

% rhs function
F = @(t, q)(frhs(t, q,r,param1,samples,delta,alpha1,alpha2,alpha3,nu));

% Call solver
tic
options = odeset('RelTol',1e-6,'AbsTol',1e-6); 
% options = odeset('RelTol',1e-8,'AbsTol',1e-4); 
% [t,Q] = ode45(F, t, q0,options);
% [t,Q] = ode113(F, t, q0,options);
[t,Q] = ode15s(F, t, q0,options);
% [t,Q] = ode45(F, [0,tf], q0,options);
% [t,Q] = ode23s(F, [0,tf], q0,options);
runtime = toc;
nt = length(t);


x = -3:.01:3;
u = zeros(length(t),length(x));

tic
for j = 1:nt
%     u(j,:,:) = Q(j,1).*exp(-( (x - Q(j,5)).^2 +...
%             (y - Q(j,7)).^2 )./Q(j,3).^2) +...
%             Q(j,2).*exp(-( (x - Q(j,6)).^2 +...
%             (y - Q(j,8)).^2 )./Q(j,4).^2);
    for iq = 1:r
        gaussnum = (iq-1)*param1;
        u(j,:,:)  = squeeze(u(j,:,:)) + Q(j,1+gaussnum).^2.*...
            exp(-( (x - Q(j,3+gaussnum)).^2  )./Q(j,2+gaussnum).^2);
    end
     disp(['t=',num2str(t(j))]);
end
toc


B = @(x) alpha1*x.^4 + alpha2*x.^3 + alpha3*x.^2;

Bprime = @(x) 4*alpha1*x.^3 + 3*alpha2*x.^2 + 2*alpha3*x;


vol = integral(@(x)exp( -B(x)/nu ),...
        -Inf,Inf,'RelTol',0,'AbsTol',1e-12);

uF = exp( -B(x)/nu )/vol;


ExpectedMass = 1;

mass = nan(1,length(t));


for j = 1:length(t)
    mass(j)  = sqrt(pi)*sum(Q(j,1:param1:end).^2.*Q(j,2:param1:end));
end

figure
plot(x,u(end,:) - uF,'linewidth',1)
xlabel('$x$','interpreter','latex','fontsize',14)
ylabel('$\hat{p}_{eq} - p_{eq}$','interpreter','latex','fontsize',14)
% title('RONS','interpreter','latex','fontsize',14)
title(['Equilibrium Error' ],'interpreter','latex','fontsize',14)
set(gca,'FontSize',20)


M = struct('cdata', cell(1,ceil(length(t))), 'colormap', cell(1,ceil(length(t)))); %intialize movie

mcount = 1;

fig2 =  figure;
for it = 1:length(t)
% for it = 1:181

    box on
    plot(x, uF,'k--','linewidth',2)
    hold on
    plot(x, u(it,:),'b','linewidth',2)
    hold off
    xlabel('$x$','interpreter','latex')
    ylabel('$p$','interpreter','latex')
    title(['PDF, $t = ',num2str(t(it),'%4.2f'),'$' ],'interpreter','latex','fontsize',14)
%     ylim([0, 0.9])
%     ylim([0, max(uF)+0.2])
    ylim([0, max(max(u))+0.01])
    xlim([x(1), x(end)])
%     axis tight
    set(gca,'FontSize',24)
         set(gcf,'color','w');
    M(mcount) = getframe(fig2);
    mcount = mcount+1;
end

ymax = 1.6;
figure
it = 1;
box on
plot(x, uF,'k--','linewidth',1)
hold on
plot(x, u(it,:),'b','linewidth',1)
hold off
xlabel('$x$','interpreter','latex')
ylabel('$p$','interpreter','latex')
title(['$t = ',num2str(t(it),'%4.2f'),'$' ],'interpreter','latex','fontsize',14)
axis tight
xlim([-3, 3])
ylim([0, ymax])
set(gca,'FontSize',24)
set(gcf,'color','w');
%     legend('$p_{eq}$','LS','RONS','interpreter','latex')
figure
it = 6;
box on
plot(x, uF,'k--','linewidth',1)
hold on
plot(x, u(it,:),'b','linewidth',1)
hold off
xlabel('$x$','interpreter','latex')
ylabel('$p$','interpreter','latex')
title(['$t = ',num2str(t(it),'%4.2f'),'$' ],'interpreter','latex','fontsize',14)
axis tight
xlim([-3, 3])
ylim([0, ymax])
set(gca,'FontSize',24)
set(gcf,'color','w');
%     legend('$p_{eq}$','LS','RONS','interpreter','latex')
figure
it = 12;
box on
plot(x, uF,'k--','linewidth',1)
hold on
plot(x, u(it,:),'b','linewidth',1)
hold off
xlabel('$x$','interpreter','latex')
ylabel('$p$','interpreter','latex')
title(['$t = ',num2str(t(it),'%4.2f'),'$' ],'interpreter','latex','fontsize',14)
axis tight
xlim([-3, 3])
ylim([0, ymax])
set(gca,'FontSize',24)
set(gcf,'color','w');
%     legend('$p_{eq}$','LS','RONS','interpreter','latex')
figure
it = nt;
box on
plot(x, uF,'k--','linewidth',1)
hold on
plot(x, u(it,:),'b','linewidth',1)
hold off
xlabel('$x$','interpreter','latex')
ylabel('$p$','interpreter','latex')
title(['$t = ',num2str(t(it),'%4.2f'),'$' ],'interpreter','latex','fontsize',14)
axis tight
xlim([-3, 3])
ylim([0, ymax])
set(gca,'FontSize',24)
set(gcf,'color','w');



% for i = 1:4
%     exportgraphics(figure(i),['1D_bistable_',num2str(r),...
%         'gauss_badIC_delta',num2str(1/delta),'_CRONS_t',num2str(i),'.pdf'])
%     savefig(figure(i),['1D_bistable_',num2str(r),...
%         'gauss_badIC_delta',num2str(1/delta),'_CRONS_t',num2str(i),'.fig'])
% end
% save(['1D_bistable_',num2str(r),...
%         'gauss_badIC_delta',num2str(1/delta),'_CRONS_t',num2str(i),'.mat'])

%% function
function dqdt = frhs(t,q,r,param1,samples,delta,alpha1,alpha2,alpha3,nu)

% t

dim = 1;
params = length(q);

x = linspace(-4,4,samples); % determine where to sample

M = zeros(samples,params); %metric tensor
F = zeros(samples,1); %rhs vector
gradI_m = zeros(params, 1);

for ix = 1:samples
    M(ix,:) = reshape(derivs_1D_bistable(x(ix),q,r,param1)',[1,params]);
    %easier to break  RHS into linear and nonlinear parts to vectorize each
    %of the terms
    F(ix) =  F0_1D_bistable_CRONS(x(ix),q,r,param1,alpha1,alpha2,alpha3,nu);
end


for i = 1:r
    gradI_m(param1*(i-1)+1:param1*i) = pi^(dim/2)*...
        [2*q(1+param1*(i-1)).*q(2+param1*(i-1)).^dim;
        dim*q(1+param1*(i-1)).^2.*q(2+param1*(i-1)).^(dim-1);
        zeros(dim,1)];
end


qk = reshape(q,[param1,r])';
q1 = qk(:,1); q2 = qk(:,2); q3 = qk(:,3);

denom = sum(q1.^2.*exp(-(x - q3).^2./q2.^2));
denom(denom<=1E-16)=1;

% F = F./denom';
% M = M./denom';
% 
% f = (M')*F;
% M = (M')*M;

f = (M'./denom)*F;
M = (M'./denom)*M;

% delta = 1E-1;
% delta = 0;

minv= (M + delta * eye(params))\gradI_m;
finv= (M + delta * eye(params))\f;
% % Minv = pinv(M + delta * eye(params));
% % minv=Minv*gradI_m;
% % finv=Minv*f;
% 
lambda = dot(gradI_m, finv)/dot(gradI_m, minv);
dqdt = (M + delta * eye(params)) \ (f- lambda*gradI_m);



% dqdt = pinv([M;gradI_m']) * [F;0];


end


